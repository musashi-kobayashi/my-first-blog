blog/templates/blog/post_list.htmlファイルにリンクを追加していきましょう。 コードエディタで開いたら、次のようになっていますよね：

blog/templates/blog/post_list.html
{% extends 'blog/base.html' %}

{% block content %}
    {% for post in posts %}
        <div class="post">
            <div class="date">
                {{ post.published_date }}
            </div>
            <h2><a href="">{{ post.title }}</a></h2>
            <p>{{ post.text|linebreaksbr }}</p>
        </div>
    {% endfor %}
{% endblock %}
投稿リストの投稿のタイトルから投稿の詳細ページへのリンクを作りたいです。 投稿の詳細ページにリンクするように<h2><a href="">{{ post.title }}</a></h2>を変更しましょう。

 blog/templates/blog/post_list.html
<h2><a href="{% url 'post_detail' pk=post.pk %}">{{ post.title }}</a></h2>
不思議な{％ url 'post_detail' pk = post.pk ％}を説明します。 気づいたかもしれませんが、{% %}という表記はDjangoのテンプレートタグを使用していることを意味しています。 今私たちはこれをURLを作るために使います！

post_detailの部分は、Djangoがblog/urls.pyに書かれた name=post_detail のURLを待ち受けることを表しています。

そしてpk=post.pkについてはどうでしょうか？ pkはプライマリキーの略で、データベースの各レコードのユニークな名前です。 Postモデルでプライマリキーを指定しなかったので、Djangoは私たちのために1つのキーを作成し（デフォルトでは、各レコードごとに1ずつ増える数字で、たとえば1、2、3です）、各投稿にpkというフィールド名で追加します。 Postオブジェクトの他のフィールド（title、authorなど）にアクセスするのと同じ方法で、post.pkと書くことによってプライマリキーにアクセスします！

さて、私たちが http://127.0.0.1:8000/ に行くとエラーが出ます（知っての通り、URLもpost_detailのビューもまだ作っていないので）。 このようになります：