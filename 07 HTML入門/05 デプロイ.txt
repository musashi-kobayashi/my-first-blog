もう一つ: デプロイしましょう！
ここまでやったことを公開して、インターネットで動かしてみると楽しいですよね。PythonAnywhereでデプロイしてみましょう。

Githubに自分のコードをPushしてみよう
まずは、最後に実行したときから、どのファイルを変更したか見てみましょう(以下のコマンドを、PythonAnywhereではなく、自分のパソコンで実行してください。)。

command-line
$ git status
djangogirls ディレクトリにいることを確認して、 git に対してこのディレクトリ内の変更を全て反映させるよう指示してください:

command-line
$ git add --all .
ノート --all をつけると、 git は、ファイルを削除したかどうかも判定します (これがない初期設定の状態では、新しいファイルと変更されたファイルしか認識しません)。 . が、今いるディレクトリを表すということも思い出してくださいね(第３章にありました)。

全てのファイルをアップロードする前に、gitが何をアップロードするのかチェックしておきましょう(gitがアップロードする全ファイルは緑で表示されます):

command-line
$ git status
ほぼ完了です。どこを変更したかを履歴に保存するよう指示してみましょう。 何を変更したのか説明するコミットメッセージを残しましょう。 この時、どんな内容を好みで打ち込んでも構いませんが、何をしたかを具体的に書き込んでおけば、将来、作業内容を思い出す助けになるでしょう。

command-line
$ git commit -m "Changed the HTML for the site."
ノート コミットメッセージは二重クォート記号で囲みましょう。

ここまで終われば、GitHubに変更部分をアップロード(push) しましょう。

command-line
$ git push

新しいコードをPythonAnywhereにpullして、自分のウェブアプリを再度実行させる
PythonAnywhereのコンソールページを開き、Bash コンソールに移動してください (または新たなBash コンソールを開始してください)。それから次を実行してください。

PythonAnywhere command-line
$ cd ~/<your-pythonanywhere-domain>.pythonanywhere.com
$ git pull
[...]
<your-pythonanywhere-domain>を、山カッコ<>をつけずに、実際のPythonAnywhereのサブドメイン名に置き換える必要があります。 通常、サブドメイン名はPythonAnywhereユーザー名ですが、場合によっては多少異なることがあります（ユーザー名に大文字が含まれている場合など）。 このコマンドが機能しない場合は、ls（ファイルを一覧にする）コマンドを使用して、実際のサブドメイン名とフォルダ名を見つけ、そこに cd します。

では、自分のコードがダウンロードされたことを確認しましょう。 それをチェックしたい場合は、「Files」ページ に移動して、自分のコードをPythonAnywhereの中で見てみましょう（コンソールページのメニューボタンからPythonAnywhereの他のページにアクセスできます）。

最後に、「Web」ページへ移動して、自分のアプリのReloadボタンをクリックします。
あなたのアプリが更新され、動いています！ウェブサイトを開いて、再読込してみましょう。どう変わったのか、見えるはずです。:)